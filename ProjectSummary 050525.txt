Here is a detailed project summary for your Amazon Seller application, including a description of what the app does and the roles of each major script. This will ensure a smooth handover when you switch to your new development folder.

Amazon Seller Application – Project Summary
Project Overview
This application is designed to help Amazon sellers process, analyze, and visualize order and sales data, as well as generate custom SVG graphics for product stakes. It features a user-friendly GUI built with PyQt5, supports drag-and-drop order file processing, and integrates with both local scripts and external APIs. The app is modular, with clear separation between data processing, SVG generation, GUI, and experimental integrations (like LLMs).

Functional Areas
1. Order Data Processing
Purpose: Import, parse, and process Amazon order files (TXT/CSV), extract order details, and prepare data for visualization or further processing.
Key Scripts:
001 AMAZON DATA DOWNLOAD/order_pipeline.py: Main pipeline for processing order files, leveraging helper modules for parsing, API calls, and output generation.
001 AMAZON DATA DOWNLOAD/order_parser.py: Parses raw Amazon order files into structured data.
001 AMAZON DATA DOWNLOAD/app.py: Likely provides a CLI or additional processing interface for Amazon orders.
001 AMAZON DATA DOWNLOAD/api_client.py, auth_direct.py, get_auth_token.py, self_auth.py, self_authorize.py: Handle API authentication and requests, possibly for Amazon SP-API or related services.
2. SVG Generation for Product Stakes
Purpose: Generate custom SVG graphics for different types of product stakes (memorial, photo, colored, etc.) based on order data.
Key Scripts:
002 D2C WRITER/regular_stakes.py: Generates SVGs for standard stakes.
002 D2C WRITER/bw_stakes.py, bw_large_stakes.py, bw_photo_stakes.py, bw_large_photo_stakes.py: Generate SVGs for black-and-white, large, and photo stakes.
002 D2C WRITER/coloured_large_photo_stakes.py, coloured_large_stakes.py: Generate SVGs for colored stake variants.
002 D2C WRITER/memorial_base.py: Provides base classes or utilities for SVG stake generation.
002 D2C WRITER/design_writer.py: Likely a utility for writing SVG or design files.
002 D2C WRITER/main.py: May serve as a CLI or batch processor for SVG generation.
3. GUI and User Interaction
Purpose: Provide a graphical interface for users to process orders, generate SVGs, filter data, and export results.
Key Scripts:
main_gui_qt_clean.py: The main, modern PyQt5 GUI. Supports drag-and-drop, table views, filtering, exporting, and integration with order/SVG processing scripts.
main_gui_qt.py: An earlier or alternate version of the main GUI.
main_gui.py: A Tkinter-based GUI (legacy or alternative).
pyqt_test_qpushbutton.py: Minimal PyQt5 button test/demo.
4. Experimental and Advanced Features
Purpose: Integrate advanced features like Large Language Models (LLMs) for data analysis, summarization, or automation.
Key Scripts:
llm_integration/: Contains scripts for integrating Llama and HuggingFace models, downloading models, converting formats, and interfacing with LLMs.
llm_interface.py: Main interface for LLM operations.
download_llama.py, download_from_hf.py, convert_model.py, etc.: Scripts for managing model downloads and conversions.
configure_hf.py, configure_token.py: Setup scripts for HuggingFace API/config.
5. Assets and Data
Purpose: Store images, graphics, SKU lists, and other static assets used by the application.
Key Folders:
004 IMAGES/: Product/customer images referenced by orders.
005 Assets/: Graphics assets and SKU list (SKULIST.csv).
SVG_OUTPUT/: Output folder for generated SVG files.
6. Sales Analysis
Purpose: Analyze sales data, generate heatmaps, and other sales-related visualizations.
Key Files:
003 SALES/AMAZON UK HEATMAP EXAMPLE.csv, output_heatmap.csv, output_heatmap_heatmap.png: Example outputs and sales data.
7. Backup, Recovery, and Utilities
Purpose: Provide backup, recovery, and script utility functions.
Key Scripts:
create_recovery_point.py, create_recovery_point.bat: Scripts to create recovery points/backups.
install_requirements.py: Automatically installs all required dependencies (including pip if missing).
requirements.txt: Lists all Python dependencies.
README_DEPENDENCIES.txt: Instructions for setting up the environment.
How the Application Works (Typical Workflow)
User launches the GUI (main_gui_qt_clean.py) via the provided batch file.
User drags and drops Amazon order files into the GUI.
Order files are parsed and processed using the pipeline in order_pipeline.py and related modules.
Data is displayed in the GUI for review, filtering, and export.
SVG graphics are generated for each order using the appropriate stake generator scripts.
Outputs (CSV, SVG, TXT) are saved in designated output folders.
(Advanced) User can interact with LLM features if configured, for data summarization or automation.
Dependency Management
All dependencies are listed in requirements.txt and are auto-installed at startup via install_requirements.py.
The auto-installer will also install pip if missing.
Key dependencies: pandas, numpy, matplotlib, seaborn, PyQt5, pyperclip, svgwrite, requests.
Security and Config
Sensitive information (like API keys) is stored in .env files.
.gitignore ensures sensitive and unnecessary files are not committed.
Development and Maintenance Notes
The codebase is modular and organized by function (data download, SVG writing, assets, sales, LLM integration).
Backups and recovery points are regularly created and stored.
The app is designed for easy onboarding: new users just need to run the main GUI and dependencies will be handled automatically.
Key Scripts – Detailed Roles
| Script/Folder | Description | |---------------|-------------| | main_gui_qt_clean.py | Main PyQt5 GUI for the app. Handles user interaction, file drops, table display, and calls order/SVG processing logic. | | main_gui_qt.py | Alternate/earlier version of the PyQt5 GUI. | | main_gui.py | Tkinter-based GUI (legacy or for testing). | | 001 AMAZON DATA DOWNLOAD/order_pipeline.py | Main logic for processing Amazon order files. | | 001 AMAZON DATA DOWNLOAD/order_parser.py | Parses raw order files into structured data. | | 001 AMAZON DATA DOWNLOAD/app.py | CLI or additional processing interface for Amazon orders. | | 001 AMAZON DATA DOWNLOAD/api_client.py, etc. | Handle API authentication and requests (e.g., Amazon SP-API). | | 002 D2C WRITER/regular_stakes.py | Generates SVGs for standard stakes. | | 002 D2C WRITER/bw_stakes.py, etc. | Generate SVGs for various stake types (BW, photo, large, colored, etc.). | | 002 D2C WRITER/memorial_base.py | Base classes/utilities for SVG generation. | | 002 D2C WRITER/main.py | CLI or batch processor for SVG generation. | | llm_integration/ | Scripts for integrating and managing LLMs (Llama, HuggingFace, etc.). | | install_requirements.py | Auto-installs all required dependencies (and pip if missing). | | requirements.txt | List of all Python dependencies. | | README_DEPENDENCIES.txt | Instructions for installing dependencies. | | create_recovery_point.py | Script to create recovery points/backups. |

This summary should equip you (and me) to pick up development seamlessly in your new folder.
If you need a more granular breakdown of any script or want a Markdown version for documentation, let me know!